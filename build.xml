<project name="Library" default="technical-doc" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	    
	  <property name="system.name" value="Library" />
	  
	  <property name="src.dir" location="${basedir}/src/main/java" />
	  <property name="lib.dir" location="${basedir}/lib" />
	  <property name="build.dir" location="${basedir}/build" />
	  <property name="test.dir" location="${basedir}/test/main/java" />
	  <property name="doc.dir" location="${basedir}/doc"/>
	  <property name="testdoc.dir" location="${basedir}/doc"/>
	  <property name="reports.dir" location="${basedir}/reports"/>
		
	  <property name="junit.jar" location="${lib.dir}/junit-4.6.jar" />
	
	  <property name="api.doc.dir" location="${doc.dir}/api/"/>
	  <property name="design.doc.dir" location="${doc.dir}/design/"/>
	
	  <property name="umlet.home.dir" location="${lib.dir}/umlet/" />
	  <property name="design.diagrams.dir" location="${basedir}/design/diagrams" />
	
	  <property name="req.dir" location="${basedir}/requirements" />
	  <property name="req.doc.dir" location="${doc.dir}/requirements" />
	  <property name="coverage.dir" location="${reports.dir}/coverage" />
	
	  <patternset id = "meta.files">
	  	 <include name="**/*.xml"/>
	  </patternset>
	
	<!--
	  <path id="compile.classpath">
	    <fileset dir ="${lib.dir}">
	    	<include name ="**/*.jar"/>
	    	<exclude name="umlet/**/*.jar"/>
	    </fileset>
	  </path>

	  <target name="init">
	       <mkdir dir="${build.dir}" />
	  	   <mkdir dir="${reports.dir}" />
	  	   <mkdir dir="${doc.dir}"/>
	  </target>
-->
	  <target name="clean-diagrams">
	  	  <delete>
	  	    <fileset dir="${design.diagrams.dir}" includes="**/*.png"/>
	  	  </delete>

		  <delete>
		  	<fileset dir="${req.dir}" includes="**/*.png"/>
		  </delete>
	  </target>
	
	<!--
	
	  <target name="clean" >
	       <delete dir="${build.dir}" />
           <delete dir="${reports.dir}" />
           <delete dir="${doc.dir}"/>	
	  </target>
	
	  <target name="copymeta">
	  	   <copy todir="${build.dir}">
	  	   	  <fileset dir="${src.dir}">
	  	   	  	  <patternset refid = "meta.files"/>
	  	   	  </fileset>
	  	   </copy>
	  </target>
	
	  <target name="compile" depends="init, copymeta" >
	    <javac srcdir="${src.dir}" 
	    	  destdir="${build.dir}"  
	    	encoding="UTF-8" 
	    	debug="on" 
	    	includeAntRuntime="no">
	      <classpath refid="compile.classpath" />
	      <compilerarg value="-Xlint:all" />
	    </javac>
	  </target>
	
    <target name="compile-test" depends = "compile" >       
        <javac srcdir="${test.dir}" 
        	destdir="${build.dir}" 
        	encoding="UTF-8" 
        	debug="on" 
        	includeAntRuntime="no">
          <classpath refid="compile.classpath" />
          <compilerarg value="-Xlint:all" />
          <compilerarg value="-Werror" />
        </javac>
     </target>

	
	
	<property name="junit.dir" location="${reports.dir}/junit" />
	
	
	 <target name="test" depends="compile, compile-test" >
	 	<delete dir="${junit.dir}"/>
	 	<mkdir dir="${junit.dir}" />
	    
	    <junit printsummary="withOutAndErr" haltonfailure="${junit.haltonfailure}">
	      <classpath>
	        <pathelement location="${build.dir}" />
	        <path refid="compile.classpath" />
	      </classpath>
	      <formatter type="xml" />
	      <batchtest todir="${junit.dir}">
	        <fileset dir="${build.dir}" includes="**/*Test.class" />
	      </batchtest>
	    </junit>
	  </target>
	
	
	  <target name="testreport" depends = "test" >
	    <taskdef name="junitreport"
	             classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator" />
	    <junitreport todir="${junit.dir}">
	      <fileset dir="${junit.dir}" includes="TEST-*.xml" />
	      <report format="frames" todir="${junit.dir}" />
	    </junitreport>
	  </target>
	
			
		<target name= "coverage" depends="compile, compile-test">
			<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
			        <classpath path="${lib.dir}/jacocoant.jar"/>
			    </taskdef>
			
			<jacoco:coverage>
				<junit fork="true"  forkmode="once" printsummary="withOutAndErr" haltonfailure="${junit.haltonfailure}">
					      <classpath>
					        <pathelement location="${build.dir}" />
					        <path refid="compile.classpath" />
					      </classpath>
					      <formatter type="xml" />
					      <batchtest todir="${junit.dir}">
					        <fileset dir="${build.dir}" includes="**/*Test.class" />
					      </batchtest>
					    </junit>
			</jacoco:coverage>
			
	 	</target>
	
	  <target name="coverage-report" >
		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
			        <classpath path="${lib.dir}/jacocoant.jar"/>
			    </taskdef>
			
			<jacoco:report>
			   <executiondata>
			       <file file="jacoco.exec"/>
			   </executiondata>
			   <structure name="Library">
			       <classfiles>
			           <fileset dir="${build.dir}"/>
			       </classfiles>

			       <sourcefiles encoding="UTF-8">
			           <fileset dir="src"/>
			       </sourcefiles>
			   </structure>                    
			   <html destdir="${coverage.dir}"/>
			</jacoco:report>
	  </target>
	
	
	
	  <property name="checkstyle.dir" location="${reports.dir}/checkstyle"/>
	  <property name="checkstyle.jar" value="${lib.dir}/checkstyle-all-5.0.jar"/>

	  <path id="checkstyle.classpath">
	    <pathelement path="${build.dir}"/>
	    <path refid="compile.classpath"/>
	  </path>

	  <target name="checkstyle" depends="compile" >	  	
	    <taskdef resource="checkstyletask.properties" classpath="${checkstyle.jar}" />

	    <mkdir dir="${checkstyle.dir}"/>
	    <checkstyle config="${lib.dir}/checkstyle/sun_checks.xml" 
	                failOnViolation="false" 
	                classpathref="checkstyle.classpath">
	      <fileset dir="${src.dir}" includes="**/*.java"  />	      
	      <formatter type="plain"/>
	      <formatter type="xml" tofile="${checkstyle.dir}/checkstyle.xml" />	    		    
	    </checkstyle>
	  	
	  	
        <xslt in="${checkstyle.dir}/checkstyle.xml" 
              out="${checkstyle.dir}/index.html" 
              style="${lib.dir}/checkstyle/checkstyle-noframes.xsl">
          <param name="title" expression="Checkstyle Report" />
          <param name="module" expression="Library" />
        </xslt>

	  </target>

	  <target name="javadoc" depends="compile" >
	  	<delete dir="${api.doc.dir}"/>
	    <mkdir dir="${api.doc.dir}"/>
	    <javadoc classpathref="compile.classpath"
	             sourcepath="${src.dir}"
	             destdir="${api.doc.dir}"
	             author="true"
	             version="true"
	             use="true"
	             package="true"
	             windowtitle="Library Documentation"
	             doctitle="Library Documentation"
	    	   	encoding="UTF-8"
	             failonerror="true"/>
	  </target>
		
-->
	  <target name="design-umlet" description="Converts Design UML diagram files to images">
	   	 <available file="${umlet.home.dir}/umlet.jar" property="umletExists"/>
	  	  <fail unless="umletExists" message="UMLet is not installed"/>


	  	
	  	  <java jar="${umlet.home.dir}/umlet.jar" fork="true">
				<arg value="-action=convert" />
				<arg value="-format=png" />
				<arg value="-filename=${design.diagrams.dir}/*.uxf" />
	  	  		<arg value="-output=${design.diagrams.dir}" />
	  	  </java>
	  </target>
	
	
       <path id="wikitext.classpath">
			<fileset dir="${lib.dir}">
				<include name="org.eclipse.mylyn.wikitext.*core*.jar"/>
			</fileset>
		</path>

		<taskdef classpathref="wikitext.classpath" 
			resource="org/eclipse/mylyn/wikitext/core/util/anttask/tasks.properties" />
	

		<target name="design-doc" depends="design-umlet">
			
			<delete dir="${design.doc.dir}"/>
		    <mkdir dir="${design.doc.dir}"/>

			<wikitext-to-html markupLanguage="Textile" sourceEncoding="UTF-8">
						<fileset dir="${basedir}/design">
			    				<include name="*.textile"/>
						</fileset>
						<stylesheet url="styles/main.css"/>
		    </wikitext-to-html>

   		   <move todir="${design.doc.dir}">
		     <fileset dir="${basedir}/design">
		       <include name="**/*.html"/>
		     </fileset>
		   </move>
			
		   <mkdir dir="${design.doc.dir}/diagrams"/>
		   <copy todir="${design.doc.dir}">
			    <fileset dir="${basedir}/design">
			    	<include name="**/*.png"/>
			    	<include name="**/*.jpg"/>
			    </fileset>
		   </copy>

		</target>
	
		<target name="req-umlet" description="Converts Requirements UML diagram files to images">
		   	 <available file="${umlet.home.dir}/umlet.jar" property="umletExists"/>
		  	  <fail unless="umletExists" message="UMLet is not installed"/>  
			

		  	
		  	  <java jar="${umlet.home.dir}/umlet.jar" fork="true">
					<arg value="-action=convert" />
					<arg value="-format=png" />
					<arg value="-filename=${req.dir}/*.uxf" />
		  	  		<arg value="-output=${req.dir}" />
		  	  </java>
			
			
		</target>
	
		<target name="req-doc" depends="req-umlet">
			
			<delete dir="${req.doc.dir}"/>
		    <mkdir dir="${req.doc.dir}"/>
	
			<wikitext-to-html markupLanguage="Textile" sourceEncoding="UTF-8">
						<fileset dir="${req.dir}">
			    			<include name="*.textile"/>
						</fileset>
						<stylesheet url="styles/main.css"/>
		    </wikitext-to-html>
	
			<move todir="${req.doc.dir}">
		    <fileset dir="${req.dir}">
		       <include name="**/*.html"/>
		     </fileset>
		   </move>
			
		   <mkdir dir="${req.doc.dir}"/>
		   <copy todir="${req.doc.dir}">
			    <fileset dir="${req.dir}">
			    	<include name="**/*.png"/>
			    </fileset>
		   </copy>
	
		</target>
	
	  
	  	    <target name="technical-doc" depends="clean-diagrams, design-doc, req-doc" description="Builds Technical Documentation">
	        
	    </target>

	
	    <target name="all"	depends="technical-doc"/>
		

	
</project>


